2. 
value > p->m_value (Line 186) causes an error, since here, both LHS and RHS are defined to be of type Complex, and no comparison operator has been defined for this class. The compiler error given is “invalid operands to binary expression”.

3b. 
I would not be able to solve the problem with the given constraints using
the single parameter listAll, because when we need to output the string in one
iteration of the function, we need to remember information from the previous
iteration, ie. the path of the previous iteration. Without that information
given to the current iteration, it would be impossible to print the correct
full path of a menu item. Hence, a two-parameter overload of listAll was
essential to complete the recursion implementation.

4a.
The time complexity of this algorithm is O(N^3). This is because for every
item from 0 to N-1, 3 iterations of items from 0 to N-1 are executed. Thus,
the complexity becomes O(N*N*N) = O(N^3)

4b.
The time complexity of this algorithm is still O(N^3). This is because even
though this will be much more efficient, in the worst case, the loop in the
middle will still have an iteration with j<N which will run from 0 to N-1,
thus making the time complexity O(N*N*N) = O(N^3).

5a.
The time complexity of interleave is O(N^2). This is because there is a loop
which iterates through all the N items in a sequence, and then uses the get 
function for all of them, and in the worst case, the get function has the 
complexity of N. The rest are all constant operations. Thus, the time 
complexity is O(N*N) = O(N^2)


5b.
The time complexity of interleave in this implementation is O(N). This
is because a constant number of constant operations are performed for each node 
in both of the sequences, and there are N number of nodes in both of the
sequences. Hence, we have a time complexity of O(N) in this case. This is a much 
better implementation of interleave than part a because as N becomes larger and 
larger, this implementation will perform much, much better since its complexity
is linear.

